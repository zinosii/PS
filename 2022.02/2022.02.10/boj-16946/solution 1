import sys
import copy
from collections import deque
input=sys.stdin.readline


N,M=map(int,input().split())
board=[list(map(int,input().rstrip())) for _ in range(N)]
newboard=copy.deepcopy(board)
direction=[[0,1],[-1,0],[0,-1],[1,0]]
samespace=dict()


def fill(i,j):
    bfsq=deque()
    bfsq.append((i,j))
    empty=1
    temp={(i,j)}
    newboard[i][j]=1
    samespace[(i,j)]=temp
    while bfsq:
        for _ in range(len(bfsq)):
            x,y=bfsq.popleft()   
            for i in range(4):
                nx=x+direction[i][0]
                ny=y+direction[i][1]        
                if 0<=nx<N and 0<=ny<M and not newboard[nx][ny]:
                    bfsq.append((nx,ny))
                    samespace[(nx,ny)]=temp
                    newboard[nx][ny]=1
                    temp.add((nx,ny))
                    empty+=1
    for i in temp:
        newboard[i[0]][i[1]]=empty
                    
for i in range(N):
    for j in range(M):
        if not newboard[i][j]:
            fill(i,j)

answer=[]
for i in range(N):
    for j in range(M):
        if board[i][j]:
            ans=1
            adjac=[]
            for k in range(4):
                x=i+direction[k][0]
                y=j+direction[k][1]
                if 0<=x<N and 0<=y<M and not board[x][y]:
                    adjac.append((x,y))
            
            while adjac:
                dellist=[]
                nxt=adjac.pop()
                ans+=newboard[nxt[0]][nxt[1]]
                for k in adjac:
                    if k in samespace[nxt]:
                        dellist.append(k)
                for k in dellist:
                    adjac.remove(k)
            answer.append(str(ans%10))
        else:
            answer.append('0')
    answer.append('\n')
answer.pop()
print(''.join(answer))
