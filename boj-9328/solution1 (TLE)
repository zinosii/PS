## 처음 생각한 풀이, pypy3로 제출시 AC, python3는 TLE
## 가장자리에서 빈공간을 찾아, 그 점에서 계속 bfs로 탐색하는 풀이 -> 각점마다 반복해서 bfs로 탐색하므로 TLE


import sys
from collections import deque



direction=[[0,-1],[-1,0],[0,1],[1,0]]
def solve():
    h,w=map(int,sys.stdin.readline().split())
    Map=[list(sys.stdin.readline().rstrip()) for _ in range(h)]
    key=set() #열수있는 문
    for i in set(sys.stdin.readline().rstrip()):
        #print(ord(i))
        key.add(chr(ord(i)-32))
    ans=0
    
    Empty_space=deque()
    
    for i in range(w):
        for j in [0,h-1]:
            if Map[j][i]=='.':
                Empty_space.append([j,i])
            elif Map[j][i]=='$':
                ans+=1
                Map[j][i]='.'
                Empty_space.append([j,i])
            elif 'a'<=Map[j][i]<='z':
                key.add(chr(ord(Map[j][i])-32))
                Map[j][i]='.'
                Empty_space.append([j,i])
                
    for i in [0,w-1]:
        for j in range(1,h-1):
            if Map[j][i]=='.':
                Empty_space.append([j,i])
            elif Map[j][i]=='$':
                ans+=1
                Map[j][i]='.'
                Empty_space.append([j,i])
            elif 'a'<=Map[j][i]<='z':
                key.add(chr(ord(Map[j][i])-32))
                Map[j][i]='.'
                Empty_space.append([j,i])
    #가장자리 문이열려 빈공간이 될경우
    for i in range(w):
        for j in [0,h-1]:
            if 'A'<=Map[j][i]<='Z':
                if Map[j][i] in key:
                    Map[j][i]='.'
                    Empty_space.append([j,i])
    for i in [0,w-1]:
        for j in range(1,h-1):
            if 'A'<=Map[j][i]<='Z':
                if Map[j][i] in key:
                    Map[j][i]='.'
                    Empty_space.append([j,i]) 
    

    while Empty_space:
        
 
        findkey=0
        for _ in range(len(Empty_space)):
            Mx,My=Empty_space.popleft()
            collisiondoor=0
            bfsq=deque()
            bfsq.append([Mx,My])

            visited=[[0]*w for _ in range(h)]
            #bfs시작
            while bfsq:
                x,y=bfsq.popleft()
                visited[x][y]=1
                for i in range(4):
                    nx=x+direction[i][0]
                    ny=y+direction[i][1]
                    if 0<=nx<h and 0<=ny<w and not visited[nx][ny] and Map[nx][ny]!='*':
                        if Map[nx][ny]=='.': #빈공간일때
                            visited[nx][ny]=1
                            bfsq.append([nx,ny])
                        elif 'a'<=Map[nx][ny]<='z': #열쇠일때
                            #print(Map[nx][ny],ord(Map[nx][ny])-32,ord('P'),chr(80))
                            findkey=1
                            key.add(chr(ord(Map[nx][ny])-32))
                            Map[nx][ny]='.'
                            visited[nx][ny]=1
                            bfsq.append([nx,ny])
                        elif Map[nx][ny]=='$': #문서일때
                            Map[nx][ny]='.'
                            ans+=1
                            visited[nx][ny]=1
                            bfsq.append([nx,ny]) 
                        else: #문
                            if Map[nx][ny] in key:
                                Map[nx][ny]='.'
                                visited[nx][ny]=1
                                bfsq.append([nx,ny])     
                            else:
                                collisiondoor=1
            if collisiondoor:
                Empty_space.append([Mx,My])
                
        for i in range(w):
            for j in [0,h-1]:
                if 'A'<=Map[j][i]<='Z':
                    if Map[j][i] in key:
                        Map[j][i]='.'
                        Empty_space.append([j,i])
        for i in [0,w-1]:
            for j in range(1,h-1):
                if 'A'<=Map[j][i]<='Z':
                    if Map[j][i] in key:
                        Map[j][i]='.'
                        Empty_space.append([j,i]) 


        if not findkey:
            break

            
            
            

    print(ans)
    
    
    
T=int(input())
for i in range(T):
    solve()
